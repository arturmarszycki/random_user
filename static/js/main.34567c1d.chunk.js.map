{"version":3,"sources":["components/NationCheckbox.js","components/GenderSelect.js","components/SingleUser.js","components/App.js","serviceWorker.js","index.js"],"names":["NationCheckbox","props","name","code","htmlFor","type","id","checked","title","onChange","change","GenderSelect","value","SingleUser","className","src","picture","alt","first","last","age","nat","API","App","state","api","gender","nation","user","users","addCountry","filtered","forEach","push","makeURL","nationURL","genderURL","genders","nations","toString","length","setState","genderChoose","e","target","countryChoose","fetchUser","prevUsers","fetch","then","response","json","data","results","concat","catch","error","console","nationality","this","map","key","el","toLowerCase","login","uuid","dob","medium","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34567c1d.chunk.js","sourcesContent":["import React from 'react';\n\nconst NationCheckbox = (props) => {\n    let name = `country_${props.code}`;\n    return (\n        <label htmlFor={name}>\n            <input type=\"checkbox\" id={name} name={name} checked={props.checked} title={props.code} onChange={props.change}/>\n            <span>{props.name}</span>\n        </label>\n    )\n};\n\nexport default NationCheckbox;","import React from 'react';\n\nconst GenderSelect = (props) => {\n    return (\n        <select value={props.value} onChange={props.change}>\n            <option value=\"\">wszystkie</option>\n            <option value=\"female\">kobieta</option>\n            <option value=\"male\">mężczyzna</option>\n        </select>\n    )\n};\n\nexport default GenderSelect;","import React from 'react';\n\nconst SingleUser = (props) => {\n    return (\n        <li>\n            <div className=\"thumbnail\">\n                <img src={props.picture} alt=\"\"/>\n            </div>\n            <div className=\"info\">\n                <p>{props.first}&nbsp;{props.last}</p>\n                <span>wiek:&nbsp;{props.age}</span>\n                <p>{props.nat}</p>\n            </div>\n        </li>\n    )\n};\n\nexport default SingleUser;","import React from 'react';\nimport './App.css';\nimport NationCheckbox from './NationCheckbox.js';\nimport GenderSelect from './GenderSelect.js';\nimport SingleUser from './SingleUser.js';\n\nconst API = 'https://randomuser.me/api/?results=1';\nclass App extends React.Component {\n  state = {\n    api: API,\n    gender: '',\n    nation: [\n      {name: 'Australia', code: 'au', checked: false},\n      {name: 'Brazylia', code: 'br', checked: false},\n      {name: 'Kanada', code: 'ca', checked: false},\n      {name: 'Szwajcaria', code: 'ch', checked: false},\n      {name: 'Niemcy', code: 'de', checked: false},\n      {name: 'Dania', code: 'dk', checked: false},\n      {name: 'Hiszpania', code: 'es', checked: false},\n      {name: 'Finlandia', code: 'fi', checked: false},\n      {name: 'Francja', code: 'fr', checked: false},\n      {name: 'Wielka Brytania', code: 'gb', checked: false},\n      {name: 'Irlandia', code: 'ie', checked: false},\n      {name: 'Iran', code: 'ir', checked: false},\n      {name: 'Norwegia', code: 'no', checked: false},\n      {name: 'Holandia', code: 'nl', checked: false},\n      {name: 'Nowa Zelandia', code: 'nz', checked: false},\n      {name: 'Turcja', code: 'tr', checked: false},\n      {name: 'Stany Zjednoczone', code: 'us', checked: false}\n    ],\n    user: [],\n    users: []\n  };\n  addCountry = () => {\n    let nation = this.state.nation;\n    let filtered = [];\n    nation.forEach(nat => {\n      if(nat.checked) {\n        filtered.push(nat.code);\n      }\n    });\n    return filtered\n  };\n  makeURL = () => {\n    let nationURL, genderURL;\n    let genders = this.state.gender;\n    if(genders) {\n      genderURL = '&gender=' + genders;\n    } else {\n      genderURL = '';\n    }\n\n    let nations = this.addCountry().toString();\n    if(nations.length) {\n      nationURL = '&nat=' + nations;\n    } else {\n      nationURL = '';\n    }\n    let api = API + genderURL + nationURL;\n    this.setState({api});\n  };\n  genderChoose = (e) => {\n    this.setState({gender: e.target.value}, () => this.makeURL(this.state));\n  };\n  countryChoose = (e) => {\n    let nation = this.state.nation;\n    nation.forEach(nat => {\n      if(nat.code === e.target.title) {\n        nat.checked = e.target.checked;\n      }\n    });\n    this.setState({nation}, () => this.makeURL(this.state));\n  };\n  fetchUser = () => {\n    let prevUsers = this.state.users;\n    fetch(this.state.api)\n        .then(response => response.json())\n        .then(data => {\n          let user = data.results;\n          this.setState({user}, () => {\n            let users = prevUsers.concat(user);\n            this.setState({users});\n          })\n        })\n        .catch(error => console.error('Error:', error));\n  };\n  render() {\n    const nations = this.state.nation.map((nat) => {\n      return (\n          <NationCheckbox key={nat.code} code={nat.code} name={nat.name} checked={nat.checked} change={this.countryChoose}/>\n      )\n    });\n    let nationality;\n    const users = this.state.users.map(user => {\n      this.state.nation.forEach(el => {\n        if(el.code === user.nat.toLowerCase()) {\n          nationality = el.name;\n        }\n      });\n      return (\n          <SingleUser key={user.login.uuid} nat={nationality} first={user.name.first} last={user.name.last} age={user.dob.age} picture={user.picture.medium}/>\n      )\n    });\n    return (\n        <div className=\"container\">\n          <div className=\"container_conditions\">\n            <h4 className=\"main_header\">Pobieranie danych użytkowników z API <span>(<a href=\"https://randomuser.me\">https://randomuser.me</a>)</span></h4>\n            <div className=\"conditions_gender\">\n              <h4>Jakiej płci ma być użytkownik?</h4>\n              <div className=\"gender_select_wrapper\">\n                <GenderSelect value={this.state.gender} change={this.genderChoose}/>\n              </div>\n            </div>\n            <div className=\"conditions_nation\">\n              <h4>Jakiej narodowości ma być użytkownik? <span>(jeśli nic nie zostanie zaznaczone, narodowość będzie losowa)</span></h4>\n              {nations}\n            </div>\n          </div>\n          <div className=\"container_users\">\n            <button onClick={this.fetchUser}>Pobierz użytkownika</button>\n            <ul>\n              {this.state.users.length ? users : ''}\n            </ul>\n          </div>\n        </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}